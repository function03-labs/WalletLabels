generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL_ACCELERATE")
  directUrl = env("DATABASE_URL_SUPABASE")
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified         DateTime?
  image                  String?
  avatar                 String?
  organizationSlug       String?
  password              String?
  company               String?
  
  // Relations from first schema
  AddressLabel           AddressLabel[]
  apiKeys               ApiKey[]
  subscriptions         Subscription[]
  
  // Relations from second schema
  accounts              Account[]
  sessions              Session[]
  authenticators        Authenticator[]

  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  @@map("users")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  chains    String[]
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("api_keys")
}

model AddressLabel {
  id           String             @id @default(cuid())
  blockchain   String
  address      String
  addressName  String
  labelType    String
  label        String
  userId       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  labelSubType String
  status       AddressLabelStatus @default(PENDING)
  user         User               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("address_labels")
}

model Plan {
  id            Int            @id @default(autoincrement())
  lemonId       String
  variantId     Int            @unique
  name          String
  description   String?
  features      String[]
  price         Int
  interval      String
  intervalCount Int
  status        String         @default("published")
  isCustom      Boolean        @default(false)
  featured      Boolean        @default(false)
  sort          Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                 String    @id @default(cuid())
  lemonSqueezyId     String    @unique
  orderId            Int
  status             String
  renewsAt           DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String
  planId             Int
  email              String
  endsAt             DateTime?
  isPaused           Boolean   @default(false)
  isUsageBased       Boolean   @default(false)
  name               String
  price              String
  statusFormatted    String
  subscriptionItemId Int       @unique
  trialEndsAt        DateTime?
  plan               Plan      @relation(fields: [planId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?

  @@map("webhook_events")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum AddressLabelStatus {
  PENDING
  ACCEPTED
  DECLINED
}